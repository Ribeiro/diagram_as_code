from diagrams import Diagram, Cluster, Node
from diagrams.aws.compute import Lambda
from diagrams.aws.database import RDS
from diagrams.aws.integration import Eventbridge
from diagrams.aws.security import KMS
from diagrams.aws.storage import S3
from diagrams.aws.network import VPC, NATGateway

# Define a custom node for Subnet
class Subnet(Node):
    _provider = "aws"
    _icon_dir = "resources/aws/network"
    _icon_file = "subnet.png"

    def __init__(self, label):
        super().__init__(label)

# Define a custom node for S3 VPC Endpoint
class S3VPCEndpoint(Node):
    _provider = "aws"
    _icon_dir = "resources/aws/network"
    _icon_file = "vpc-endpoint.png"

    def __init__(self, label):
        super().__init__(label)

with Diagram("Retail Operational Decision API Architecture", show=False):

    with Cluster("On-Premise"):
        client_app = Lambda("Client Application")
        kms = KMS("AWS KMS")

    with Cluster("AWS"):
        with Cluster("S3 Public Network"):
            s3_bucket = S3("S3 Bucket")

        with Cluster("VPC - my-retail-vpc"):
            vpc = VPC("VPC")
            private_subnet = Subnet("Private Subnet")

            nat_gateway = NATGateway("NAT Gateway")
            s3_endpoint = S3VPCEndpoint("S3 VPCEndpoint")

            vpc - private_subnet
            private_subnet - nat_gateway
            private_subnet - s3_endpoint

        with Cluster("RDS Secure Zone"):
            rds_postgres = RDS("RDS Postgres")

    client_app >> kms
    client_app >> s3_bucket

    Eventbridge("EventBridge (Daily Schedule @ 10pm)") >> Lambda("Step Functions")
    Lambda("Step Functions") >> Lambda("Lambda function 1")
    Lambda("Lambda function 1") >> Lambda("Lambda function 2")
    Lambda("Lambda function 2") >> rds_postgres